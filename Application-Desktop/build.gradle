apply plugin: "java"

sourceCompatibility = 1.8


project.ext.mainClassName = "org.smallbox.farpoint.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

task buildModules() {
    println "Build modules"

    dependsOn ":modules/Fauna:distZip"
    dependsOn ":modules/Flora:distZip"
    dependsOn ":modules/Stats:distZip"

//    task ':modules/Extra distZip'
//    tasks.getByPath(":modules/Extra:buildModule")
//    println project(":modules/Extra").tasks.getByPath(":buildModule")
}

task run(dependsOn: [classes, buildModules], type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes
run.dependsOn buildModules

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

dependencies {
    compile project(":Application-Core")
    compile project(":Module-Area")
    compile project(":Module-Bridge")
    compile project(":Module-Character")
    compile project(":Module-Consumable")
    compile project(":Module-Buff")
    compile project(":Module-Build")
    compile project(":Module-Disease")
    compile project(":Module-Debug")
    compile project(":Module-Fauna")
    compile project(":Module-Item")
    compile project(":Module-Jobs")
    compile project(":Module-Flora")
    compile project(":Module-Quest")
    compile project(":Module-Stats")
    compile project(":Module-Garden")
    compile project(":Module-Power")
    compile project(":Module-Room")
    compile project(":Module-Temperature")
    compile project(":Module-Light")
    compile project(":Module-Music")
    compile project(":Module-MiniMap")
    compile project(":Module-Quest")
    compile project(":Module-Oxygen")
    compile project(":Module-Structure")
    compile project(":Module-Weather")
    compile project(":Module-TopResource")
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}