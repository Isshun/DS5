apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

project.ext.mainClassName = "org.smallbox.farpoint.desktop.DesktopLauncher"
project.ext.assetsDir = new File("../core/assets");

task buildModules() {
    println "Build modules"

    dependsOn ":modules/Fauna:distZip"
    dependsOn ":modules/Flora:distZip"
    dependsOn ":modules/Stats:distZip"

//    task ':modules/Extra distZip'
//    tasks.getByPath(":modules/Extra:buildModule")
//    println project(":modules/Extra").tasks.getByPath(":buildModule")
}

task run(dependsOn: [classes, buildModules], type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);
 
    manifest {
        attributes 'Main-Class': project.mainClassName
    }
}

dist.dependsOn classes
run.dependsOn buildModules

eclipse {
    project {
        name = appName + "-desktop"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/core/assets'
    }
}

dependencies {
    compile project(":modules/game/Bridge")
    compile project(":modules/game/Character")
    compile project(":modules/game/Buff")
    compile project(":modules/game/Disease")
    compile project(":modules/game/Debug")
    compile project(":modules/game/Fauna")
    compile project(":modules/game/Flora")
    compile project(":modules/game/Quest")
    compile project(":modules/game/Stats")
    compile project(":modules/game/Garden")
    compile project(":modules/game/Power")
    compile project(":modules/game/Temperature")
    compile project(":modules/game/Light")
    compile project(":modules/game/Music")
    compile project(":modules/game/Resource")
    compile project(":modules/game/MiniMap")
    compile project(":modules/game/Quest")
    compile project(":modules/game/Oxygen")
    compile project(":modules/game/Weather")
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
  doLast {
    def classpath = new XmlParser().parse(file(".classpath"))
    new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
    def writer = new FileWriter(file(".classpath"))
    def printer = new XmlNodePrinter(new PrintWriter(writer))
    printer.setPreserveWhitespace(true)
    printer.print(classpath)
  }
}